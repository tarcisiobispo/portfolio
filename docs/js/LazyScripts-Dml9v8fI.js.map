{"version":3,"file":"LazyScripts-Dml9v8fI.js","sources":["../../src/components/LazyScripts.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\n/**\r\n * LazyScripts Component\r\n * Loads third-party scripts only when needed to reduce initial bundle size\r\n */\r\n\r\ninterface LazyScriptsProps {\r\n  enableAnalytics?: boolean;\r\n  enableGTM?: boolean;\r\n  enableClarity?: boolean;\r\n  delay?: number;\r\n}\r\n\r\nconst LazyScripts: React.FC<LazyScriptsProps> = ({\r\n  enableAnalytics = true,\r\n  enableGTM = true,\r\n  enableClarity = true,\r\n  delay = 3000 // 3 seconds delay\r\n}) => {\r\n  const [scriptsLoaded, setScriptsLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Only load scripts in production\r\n    if (!import.meta.env.PROD) {\r\n      return;\r\n    }\r\n\r\n    // Delay script loading to improve initial page load\r\n    const timer = setTimeout(() => {\r\n      loadScripts();\r\n    }, delay);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [delay]);\r\n\r\n  const loadScripts = async () => {\r\n    try {\r\n      // Load scripts in sequence to avoid blocking\r\n      if (enableAnalytics) {\r\n        await loadGoogleAnalytics();\r\n      }\r\n\r\n      if (enableGTM) {\r\n        await loadGoogleTagManager();\r\n      }\r\n\r\n      if (enableClarity) {\r\n        await loadMicrosoftClarity();\r\n      }\r\n\r\n      setScriptsLoaded(true);\r\n      console.log('Third-party scripts loaded successfully');\r\n    } catch (error) {\r\n      console.warn('Failed to load some third-party scripts:', error);\r\n    }\r\n  };\r\n\r\n  const loadGoogleAnalytics = (): Promise<void> => {\r\n    return new Promise((resolve, reject) => {\r\n      // Check if already loaded\r\n      if (window.gtag) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      const script = document.createElement('script');\r\n      script.async = true;\r\n      script.src = 'https://www.googletagmanager.com/gtag/js?id=G-3QCW5SKK73';\r\n      script.onload = () => {\r\n        // Initialize Google Analytics\r\n        window.dataLayer = window.dataLayer || [];\r\n        function gtag(command: string, action: string, params?: any) {\r\n          window.dataLayer.push(arguments);\r\n        }\r\n        window.gtag = gtag;\r\n        gtag('js', new Date(), {});\r\n        gtag('config', 'G-3QCW5SKK73', {\r\n          page_title: document.title,\r\n          page_location: window.location.href\r\n        });\r\n        resolve();\r\n      };\r\n      script.onerror = reject;\r\n      document.head.appendChild(script);\r\n    });\r\n  };\r\n\r\n  const loadGoogleTagManager = (): Promise<void> => {\r\n    return new Promise((resolve, reject) => {\r\n      // Check if already loaded\r\n      if (window.google_tag_manager) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      // GTM script\r\n      const script = document.createElement('script');\r\n      script.async = true;\r\n      script.src = 'https://www.googletagmanager.com/gtm.js?id=GTM-M2NFRBD9';\r\n      script.onload = () => {\r\n        // Initialize dataLayer\r\n        window.dataLayer = window.dataLayer || [];\r\n        window.dataLayer.push({\r\n          'gtm.start': new Date().getTime(),\r\n          event: 'gtm.js'\r\n        });\r\n        resolve();\r\n      };\r\n      script.onerror = reject;\r\n      document.head.appendChild(script);\r\n\r\n      // GTM noscript fallback\r\n      const noscript = document.createElement('noscript');\r\n      const iframe = document.createElement('iframe');\r\n      iframe.src = 'https://www.googletagmanager.com/ns.html?id=GTM-M2NFRBD9';\r\n      iframe.height = '0';\r\n      iframe.width = '0';\r\n      iframe.style.display = 'none';\r\n      iframe.style.visibility = 'hidden';\r\n      noscript.appendChild(iframe);\r\n      document.body.appendChild(noscript);\r\n    });\r\n  };\r\n\r\n  const loadMicrosoftClarity = (): Promise<void> => {\r\n    return new Promise((resolve, reject) => {\r\n      // Check if already loaded\r\n      if (window.clarity) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      const script = document.createElement('script');\r\n      script.async = true;\r\n      script.src = 'https://www.clarity.ms/tag/rp64ayubme';\r\n      script.onload = () => {\r\n        // Initialize Clarity\r\n        (function(c: any, l: any, a: any, r: any, i: any, t?: any, y?: any) {\r\n          c[a] = c[a] || function() { (c[a].q = c[a].q || []).push(arguments) };\r\n          t = l.createElement(r); t.async = 1; t.src = \"https://www.clarity.ms/tag/\" + i;\r\n          y = l.getElementsByTagName(r)[0]; y.parentNode.insertBefore(t, y);\r\n        })(window, document, \"clarity\", \"script\", \"rp64ayubme\", undefined, undefined);\r\n        resolve();\r\n      };\r\n      script.onerror = reject;\r\n      document.head.appendChild(script);\r\n    });\r\n  };\r\n\r\n  // Don't render anything visible\r\n  return null;\r\n};\r\n\r\n// Extend window interface for TypeScript\r\ndeclare global {\r\n  interface Window {\r\n    gtag: (command: string, action: string, params?: any) => void;\r\n    dataLayer: any[];\r\n    google_tag_manager: any;\r\n    clarity: (...args: any[]) => void;\r\n  }\r\n}\r\n\r\nexport default LazyScripts;\r\n"],"names":["LazyScripts","enableAnalytics","enableGTM","enableClarity","delay","scriptsLoaded","setScriptsLoaded","useState","useEffect","timer","setTimeout","loadScripts","clearTimeout","async","loadGoogleAnalytics","loadGoogleTagManager","loadMicrosoftClarity","error","warn","Promise","resolve","reject","window","gtag","script","document","createElement","src","onload","command","action","params","dataLayer","push","arguments","Date","page_title","title","page_location","location","href","onerror","head","appendChild","google_tag_manager","getTime","event","noscript","iframe","height","width","style","display","visibility","body","clarity","c","l","a","r","t","y","undefined","q","getElementsByTagName","parentNode","insertBefore"],"mappings":"oEAcA,MAAMA,EAA0C,EAC9CC,mBAAkB,EAClBC,aAAY,EACZC,iBAAgB,EAChBC,QAAQ,QAER,MAAOC,EAAeC,GAAoBC,EAAAA,UAAS,GAEnDC,EAAAA,WAAU,KAOFC,MAAAA,EAAQC,YAAW,KACvBC,GAAAA,GACCP,GAEI,MAAA,IAAMQ,aAAaH,EAAAA,GACzB,CAACL,IAEJ,MAAMO,EAAcE,UACd,IAEEZ,SACIa,IAGJZ,SACIa,IAGJZ,SACIa,IAGRV,GAAiB,SAEVW,GACCC,QAAAA,KAAK,2CAA4CD,EAAAA,GAIvDH,EAAsB,IACnB,IAAIK,SAAQ,CAACC,EAASC,KAE3B,GAAIC,OAAOC,KAET,YADAH,IAIII,MAAAA,EAASC,SAASC,cAAc,UACtCF,EAAOX,OAAQ,EACfW,EAAOG,IAAM,2DACbH,EAAOI,OAAS,KAGLL,SAAAA,EAAKM,EAAiBC,EAAgBC,GACtCC,OAAAA,UAAUC,KAAKC,UAAAA,CAFjBF,OAAAA,UAAYV,OAAOU,WAAa,GAIvCV,OAAOC,KAAOA,EACdA,EAAK,KAAM,IAAIY,KAAQ,CAAA,GACvBZ,EAAK,SAAU,eAAgB,CAC7Ba,WAAYX,SAASY,MACrBC,cAAehB,OAAOiB,SAASC,OAEjCpB,GAAAA,EAEFI,EAAOiB,QAAUpB,EACRqB,SAAAA,KAAKC,YAAYnB,EAAAA,IAIxBT,EAAuB,IACpB,IAAII,SAAQ,CAACC,EAASC,KAE3B,GAAIC,OAAOsB,mBAET,YADAxB,IAKII,MAAAA,EAASC,SAASC,cAAc,UACtCF,EAAOX,OAAQ,EACfW,EAAOG,IAAM,0DACbH,EAAOI,OAAS,KAEPI,OAAAA,UAAYV,OAAOU,WAAa,GACvCV,OAAOU,UAAUC,KAAK,CACpB,aAAa,IAAIE,MAAOU,UACxBC,MAAO,WAET1B,GAAAA,EAEFI,EAAOiB,QAAUpB,EACRqB,SAAAA,KAAKC,YAAYnB,GAGpBuB,MAAAA,EAAWtB,SAASC,cAAc,YAClCsB,EAASvB,SAASC,cAAc,UACtCsB,EAAOrB,IAAM,2DACbqB,EAAOC,OAAS,IAChBD,EAAOE,MAAQ,IACfF,EAAOG,MAAMC,QAAU,OACvBJ,EAAOG,MAAME,WAAa,SAC1BN,EAASJ,YAAYK,GACZM,SAAAA,KAAKX,YAAYI,EAAAA,IAIxB/B,EAAuB,IACpB,IAAIG,SAAQ,CAACC,EAASC,KAE3B,GAAIC,OAAOiC,QAET,YADAnC,IAIII,MAAAA,EAASC,SAASC,cAAc,UACtCF,EAAOX,OAAQ,EACfW,EAAOG,IAAM,wCACbH,EAAOI,OAAS,KAEb,IAAS4B,EAAQC,EAAQC,EAAQC,EAAgBC,EAASC,EAAjDL,EAIPlC,OAJemC,EAIPhC,SAJuBkC,EAIF,SAJkBC,OAIME,EAJGD,OAIQC,EAHjEN,EADwBE,EAIL,WAHZF,EAAEE,IAAM,YAAcF,EAAEE,GAAGK,EAAIP,EAAEE,GAAGK,GAAK,IAAI9B,KAAKC,UAAW,GAChEuB,EAAAA,EAAE/B,cAAciC,IAAM9C,MAAQ,EAAG+C,EAAEjC,IAAM,yCAC7CkC,EAAIJ,EAAEO,qBAAqBL,GAAG,IAAMM,WAAWC,aAAaN,EAAGC,GAEjEzC,GAAAA,EAEFI,EAAOiB,QAAUpB,EACRqB,SAAAA,KAAKC,YAAYnB,EAAAA,IAKvB,OAAA,IAAA"}