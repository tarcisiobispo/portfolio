{"version":3,"mappings":"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","names":["SecureAnalyticsInterceptor","constructor","originalXMLHttpRequest","originalFetch","this","window","XMLHttpRequest","fetch","install","interceptXMLHttpRequest","interceptFetch","uninstall","originalXHR","secureValidation","SecureValidation","SecureXMLHttpRequest","xhr","originalOpen","open","method","url","rest","matchesAnalyticsPattern","validateAnalyticsUrl","warn","error","call","prototype","prop","Object","getOwnPropertyNames","descriptor","getOwnPropertyDescriptor","defineProperty","input","init","URL","href","Request","String","Promise","reject","Error","secureFetch","secureLogRocket","__publicField","interceptor","appId","config","isInitialized","console","preventDeprecatedEventListeners","LogRocketModule","__vitePreload","import","then","n","b","__VITE_PRELOAD__","logRocket","default","importError","secureConfig","shouldAugmentNPS","shouldParseXHRBlob","network","isEnabled","identify","userId","userInfo","sanitizedUserInfo","sanitizeUserInfo","undefined","track","eventName","properties","sanitizedProperties","getSessionURL","callback","length","parsedUrl","hostname","toLowerCase","trim","some","pattern","test","urlError","captureMessage","message","extra","sanitizedMessage","sanitizeString","sanitizedExtra","captureException","captureError","originalAddEventListener","addEventListener","type","listener","options","secureAddEventListener","info","sanitized","key","value","entries","sanitizedKey","JSON","stringify","isReady","instance","MicrosoftClarityInit","useEffect","clarityScript","document","createElement","innerHTML","head","appendChild","GTMHead","gtmId","script","contains","removeChild","GTMBody","noscript","body","insertBefore","firstChild","AnalyticsProvider","children","requestSanitizer","request","domain","endsWith","e","sessionURL","portfolioOwner","ownerEmail","portfolioType","version","catch","_Fragment","ANALYTICS_CONFIG","GTM_ID","jsxRuntimeExports","jsx"],"ignoreList":[],"sources":["../../src/utils/secureLogRocket.ts","../../src/components/analytics/MicrosoftClarity.tsx","../../src/components/analytics/GoogleTagManager.tsx","../../src/components/analytics/AnalyticsProvider.tsx"],"sourcesContent":["/**\n * Secure LogRocket wrapper to prevent regex-based security vulnerabilities\n * Replaces vulnerable hostname validation with secure alternatives\n */\n\nimport { SecureValidation } from './secureValidation';\n\n// Type definitions for LogRocket\ninterface LogRocketConfig {\n  shouldAugmentNPS?: boolean;\n  shouldParseXHRBlob?: boolean;\n  network?: {\n    isEnabled?: boolean;\n    requestSanitizer?: (request: any) => any | null;\n    responseSanitizer?: (response: any) => any | null;\n  };\n}\n\ninterface LogRocketInstance {\n  init: (appId: string, config?: LogRocketConfig) => void;\n  identify: (userId: string, userInfo?: Record<string, any>) => void;\n  track: (eventName: string, properties?: Record<string, any>) => void;\n  getSessionURL: (callback: (url: string) => void) => void;\n  captureMessage: (message: string, extra?: Record<string, any>) => void;\n  captureException: (error: Error, extra?: Record<string, any>) => void;\n  [key: string]: any;\n}\n\n/**\n * Secure URL interceptor for analytics requests\n * Prevents vulnerable regex patterns from being exploited\n */\nclass SecureAnalyticsInterceptor {\n  private originalXMLHttpRequest: typeof XMLHttpRequest;\n  private originalFetch: typeof fetch;\n\n  constructor() {\n    this.originalXMLHttpRequest = window.XMLHttpRequest;\n    this.originalFetch = window.fetch;\n  }\n\n  /**\n   * Install secure interceptors\n   */\n  install(): void {\n    this.interceptXMLHttpRequest();\n    this.interceptFetch();\n  }\n\n  /**\n   * Uninstall interceptors and restore original functions\n   */\n  uninstall(): void {\n    if (this.originalXMLHttpRequest) {\n      window.XMLHttpRequest = this.originalXMLHttpRequest;\n    }\n    if (this.originalFetch) {\n      window.fetch = this.originalFetch;\n    }\n  }\n\n  /**\n   * Secure XMLHttpRequest interceptor\n   */\n  private interceptXMLHttpRequest(): void {\n    const originalXHR = this.originalXMLHttpRequest;\n    const secureValidation = SecureValidation;\n\n    // Create a constructor function that matches XMLHttpRequest's signature\n    const SecureXMLHttpRequest = function(this: XMLHttpRequest) {\n      const xhr = new originalXHR();\n      const originalOpen = xhr.open;\n\n      xhr.open = function(method: string, url: string, ...rest: any[]) {\n        // Validate URL using secure methods instead of regex\n        if (typeof url === 'string') {\n          try {\n            // Check if it's an analytics URL that needs special handling\n            if (secureValidation.matchesAnalyticsPattern(url, 'wootric')) {\n              // Secure handling for Wootric URLs\n              if (!secureValidation.validateAnalyticsUrl(url)) {\n                console.warn('SecureLogRocket: Blocked potentially unsafe Wootric URL:', url);\n                return;\n              }\n            } else if (secureValidation.matchesAnalyticsPattern(url, 'delighted')) {\n              // Secure handling for Delighted URLs\n              if (!secureValidation.validateAnalyticsUrl(url)) {\n                console.warn('SecureLogRocket: Blocked potentially unsafe Delighted URL:', url);\n                return;\n              }\n            } else if (secureValidation.matchesAnalyticsPattern(url, 'logrocket')) {\n              // Secure handling for LogRocket URLs\n              if (!secureValidation.validateAnalyticsUrl(url)) {\n                console.warn('SecureLogRocket: Blocked potentially unsafe LogRocket URL:', url);\n                return;\n              }\n            }\n          } catch (error) {\n            console.warn('SecureLogRocket: Error validating URL:', error);\n            return;\n          }\n        }\n\n        return originalOpen.call(this, method, url, ...rest);\n      };\n\n      return xhr;\n    } as unknown as typeof XMLHttpRequest;\n\n    // Copy prototype and static properties to maintain compatibility\n    SecureXMLHttpRequest.prototype = originalXHR.prototype;\n    \n    // Copy all static properties from the original constructor\n    for (const prop of Object.getOwnPropertyNames(originalXHR)) {\n      if (prop !== 'prototype' && prop !== 'length' && prop !== 'name') {\n        const descriptor = Object.getOwnPropertyDescriptor(originalXHR, prop);\n        if (descriptor) {\n          Object.defineProperty(SecureXMLHttpRequest, prop, descriptor);\n        }\n      }\n    }\n\n    // Replace the global XMLHttpRequest\n    window.XMLHttpRequest = SecureXMLHttpRequest;\n  }\n\n  /**\n   * Secure fetch interceptor\n   */\n  private interceptFetch(): void {\n    const originalFetch = this.originalFetch;\n    const secureValidation = SecureValidation;\n\n    // Create a secure fetch function with the same signature\n    const secureFetch = function(input: RequestInfo | URL, init?: RequestInit): Promise<Response> {\n      let url: string;\n\n      try {\n        if (typeof input === 'string') {\n          url = input;\n        } else if (input instanceof URL) {\n          url = input.href;\n        } else if (input instanceof Request) {\n          url = input.url;\n        } else {\n          url = String(input);\n        }\n\n        // Validate analytics URLs securely\n        if (secureValidation.matchesAnalyticsPattern(url, 'wootric') ||\n            secureValidation.matchesAnalyticsPattern(url, 'delighted') ||\n            secureValidation.matchesAnalyticsPattern(url, 'logrocket')) {\n\n          if (!secureValidation.validateAnalyticsUrl(url)) {\n            console.warn('SecureLogRocket: Blocked potentially unsafe analytics URL:', url);\n            return Promise.reject(new Error('URL validation failed'));\n          }\n        }\n      } catch (error) {\n        console.warn('SecureLogRocket: Error validating fetch URL:', error);\n      }\n\n      return originalFetch.call(window, input, init);\n    };\n\n    // Replace the global fetch function\n    window.fetch = secureFetch;\n  }\n}\n\n/**\n * Secure LogRocket wrapper class\n */\nclass SecureLogRocket {\n  private logRocket: LogRocketInstance | null = null;\n  private interceptor: SecureAnalyticsInterceptor;\n  private isInitialized = false;\n\n  constructor() {\n    this.interceptor = new SecureAnalyticsInterceptor();\n  }\n\n  /**\n   * Initialize LogRocket with secure interceptors\n   */\n  async init(appId: string, config: LogRocketConfig = {}): Promise<void> {\n    if (this.isInitialized) {\n      console.warn('SecureLogRocket: Already initialized');\n      return;\n    }\n\n    try {\n      // Install security interceptors before LogRocket initialization\n      this.interceptor.install();\n\n      // Prevent deprecated unload event listeners\n      this.preventDeprecatedEventListeners();\n\n      // Dynamically import LogRocket to ensure interceptors are in place\n      try {\n        // Try to import LogRocket and handle different module formats\n        const LogRocketModule = await import('logrocket');\n        \n        // Use type assertion to handle the module structure safely\n        this.logRocket = LogRocketModule as unknown as LogRocketInstance;\n        \n        // If LogRocket is exported as default (ESM), use that instead\n        if (typeof (this.logRocket as any).default === 'object') {\n          this.logRocket = (this.logRocket as any).default;\n        }\n      } catch (importError) {\n        console.error('SecureLogRocket: Error importing LogRocket:', importError);\n        throw importError;\n      }\n\n      // Initialize with secure configuration\n      const secureConfig: LogRocketConfig = {\n        shouldAugmentNPS: false, // Disable NPS augmentation to prevent regex issues\n        shouldParseXHRBlob: false, // Disable blob parsing for security\n        network: {\n          isEnabled: true\n        },\n        ...config\n      };\n\n      this.logRocket.init(appId, secureConfig);\n      this.isInitialized = true;\n\n      console.log('SecureLogRocket: Initialized successfully with security enhancements');\n    } catch (error) {\n      console.error('SecureLogRocket: Failed to initialize:', error);\n      this.interceptor.uninstall();\n      throw error;\n    }\n  }\n\n  /**\n   * Safely identify user\n   */\n  identify(userId: string, userInfo?: Record<string, any>): void {\n    if (!this.logRocket) {\n      console.warn('SecureLogRocket: Not initialized');\n      return;\n    }\n\n    try {\n      // Sanitize user info to prevent injection\n      const sanitizedUserInfo = userInfo ? this.sanitizeUserInfo(userInfo) : undefined;\n      this.logRocket.identify(userId, sanitizedUserInfo);\n    } catch (error) {\n      console.error('SecureLogRocket: Error identifying user:', error);\n    }\n  }\n\n  /**\n   * Safely track events\n   */\n  track(eventName: string, properties?: Record<string, any>): void {\n    if (!this.logRocket) {\n      console.warn('SecureLogRocket: Not initialized');\n      return;\n    }\n\n    try {\n      // Sanitize event properties\n      const sanitizedProperties = properties ? this.sanitizeUserInfo(properties) : undefined;\n      this.logRocket.track(eventName, sanitizedProperties);\n    } catch (error) {\n      console.error('SecureLogRocket: Error tracking event:', error);\n    }\n  }\n\n  /**\n   * Get session URL safely\n   */\n  getSessionURL(callback: (url: string) => void): void {\n    if (!this.logRocket) {\n      console.warn('SecureLogRocket: Not initialized');\n      callback('');\n      return;\n    }\n\n    try {\n      this.logRocket.getSessionURL((url: string) => {\n        // More lenient validation for LogRocket session URLs\n        if (url && typeof url === 'string' && url.length > 0) {\n          try {\n            const parsedUrl = new URL(url);\n            const hostname = parsedUrl.hostname.toLowerCase().trim();\n            \n            // Allow LogRocket domains using proper regex patterns\n            const validLogRocketDomainPatterns = [\n              /^app\\.logrocket\\.com$/,\n              /^api\\.logrocket\\.com$/,\n              /^e\\.logrocket\\.com$/,\n              /^app\\.logrocket\\.io$/,\n              /^api\\.logrocket\\.io$/,\n              /^e\\.logrocket\\.io$/,\n              /^cdn\\.logrocket\\.com$/,\n              /^cdn\\.logrocket\\.io$/,\n              /^cdn\\.lr-ingest\\.io$/,\n              /^cdn\\.lr-in\\.com$/,\n              /^cdn\\.lr-in-prod\\.com$/,\n              /^cdn\\.lr-ingest\\.com$/,\n              /^cdn\\.ingest-lr\\.com$/,\n              /^cdn\\.lr-intake\\.com$/,\n              /^cdn\\.intake-lr\\.com$/,\n              /^cdn\\.logr-ingest\\.com$/,\n              /^cdn\\.lrkt-in\\.com$/,\n              /^cdn\\.lgrckt-in\\.com$/,\n              /^cdn-staging\\.logrocket\\.io$/,\n              /^cdn-staging\\.lr-ingest\\.io$/,\n              /^cdn-staging\\.lr-in\\.com$/,\n              /^cdn-staging\\.lr-in-prod\\.com$/,\n              /^cdn-staging\\.lr-ingest\\.com$/,\n              /^cdn-staging\\.ingest-lr\\.com$/,\n              /^cdn-staging\\.lr-intake\\.com$/,\n              /^cdn-staging\\.intake-lr\\.com$/,\n              /^cdn-staging\\.logr-ingest\\.com$/,\n              /^cdn-staging\\.lrkt-in\\.com$/,\n              /^cdn-staging\\.lgrckt-in\\.com$/,\n              /^r\\.logrocket\\.io$/,\n              /^r\\.lr-ingest\\.io$/,\n              /^r\\.lr-in\\.com$/,\n              /^r\\.lr-in-prod\\.com$/,\n              /^r\\.lr-ingest\\.com$/,\n              /^r\\.ingest-lr\\.com$/,\n              /^r\\.lr-intake\\.com$/,\n              /^r\\.intake-lr\\.com$/,\n              /^r\\.logr-ingest\\.com$/,\n              /^r\\.lrkt-in\\.com$/,\n              /^r\\.lgrckt-in\\.com$/,\n              /^staging-i\\.logrocket\\.io$/,\n              /^staging-i\\.lr-ingest\\.io$/,\n              /^staging-i\\.lr-in\\.com$/,\n              /^staging-i\\.lr-in-prod\\.com$/,\n              /^staging-i\\.lr-ingest\\.com$/,\n              /^staging-i\\.ingest-lr\\.com$/,\n              /^staging-i\\.lr-intake\\.com$/,\n              /^staging-i\\.intake-lr\\.com$/,\n              /^staging-i\\.logr-ingest\\.com$/,\n              /^staging-i\\.lrkt-in\\.com$/,\n              /^staging-i\\.lgrckt-in\\.com$/\n            ];\n            \n            if (validLogRocketDomainPatterns.some(pattern => pattern.test(hostname))) {\n              callback(url);\n            } else {\n              console.warn('SecureLogRocket: Invalid session URL domain:', parsedUrl.hostname);\n              callback('');\n            }\n          } catch (urlError) {\n            console.warn('SecureLogRocket: Invalid session URL format:', url);\n            callback('');\n          }\n        } else {\n          console.warn('SecureLogRocket: Empty or invalid session URL received');\n          callback('');\n        }\n      });\n    } catch (error) {\n      console.error('SecureLogRocket: Error getting session URL:', error);\n      callback('');\n    }\n  }\n\n  /**\n   * Safely capture messages\n   */\n  captureMessage(message: string, extra?: Record<string, any>): void {\n    if (!this.logRocket) {\n      console.warn('SecureLogRocket: Not initialized');\n      return;\n    }\n\n    try {\n      const sanitizedMessage = SecureValidation.sanitizeString(message);\n      const sanitizedExtra = extra ? this.sanitizeUserInfo(extra) : undefined;\n      this.logRocket.captureMessage(sanitizedMessage, sanitizedExtra);\n    } catch (error) {\n      console.error('SecureLogRocket: Error capturing message:', error);\n    }\n  }\n\n  /**\n   * Safely capture exceptions\n   */\n  captureException(error: Error, extra?: Record<string, any>): void {\n    if (!this.logRocket) {\n      console.warn('SecureLogRocket: Not initialized');\n      return;\n    }\n\n    try {\n      const sanitizedExtra = extra ? this.sanitizeUserInfo(extra) : undefined;\n      this.logRocket.captureException(error, sanitizedExtra);\n    } catch (captureError) {\n      console.error('SecureLogRocket: Error capturing exception:', captureError);\n    }\n  }\n\n  /**\n   * Prevent deprecated unload event listeners\n   */\n  private preventDeprecatedEventListeners(): void {\n    // Only apply in production to avoid interfering with development\n    // Check if we're in production using a more compatible approach\n    if (process.env.NODE_ENV !== 'production') {\n      return;\n    }\n\n    // Override deprecated event listener methods to use modern alternatives\n    const originalAddEventListener = window.addEventListener;\n\n    // Create a properly typed replacement function\n    const secureAddEventListener: typeof window.addEventListener = function(\n      this: Window,\n      type: string, \n      listener: EventListenerOrEventListenerObject, \n      options?: boolean | AddEventListenerOptions\n    ) {\n      // Replace deprecated unload events with modern alternatives\n      if (type === 'unload') {\n        console.warn('SecureLogRocket: Replacing deprecated \"unload\" event with \"pagehide\"');\n        return originalAddEventListener.call(this, 'pagehide', listener, options);\n      } else if (type === 'beforeunload') {\n        // Keep beforeunload but add warning\n        console.warn('SecureLogRocket: \"beforeunload\" event should be used sparingly');\n        return originalAddEventListener.call(this, type, listener, options);\n      }\n\n      return originalAddEventListener.call(this, type, listener, options);\n    };\n\n    // Replace the global addEventListener method\n    window.addEventListener = secureAddEventListener;\n  }\n\n  /**\n   * Uninstall and cleanup\n   */\n  uninstall(): void {\n    try {\n      if (this.logRocket && typeof this.logRocket.uninstall === 'function') {\n        this.logRocket.uninstall();\n      }\n      this.interceptor.uninstall();\n      this.logRocket = null;\n      this.isInitialized = false;\n      console.log('SecureLogRocket: Uninstalled successfully');\n    } catch (error) {\n      console.error('SecureLogRocket: Error during uninstall:', error);\n    }\n  }\n\n  /**\n   * Sanitize user info to prevent injection attacks\n   */\n  private sanitizeUserInfo(info: Record<string, any>): Record<string, any> {\n    const sanitized: Record<string, any> = {};\n\n    for (const [key, value] of Object.entries(info)) {\n      const sanitizedKey = SecureValidation.sanitizeString(String(key));\n\n      if (typeof value === 'string') {\n        sanitized[sanitizedKey] = SecureValidation.sanitizeString(value);\n      } else if (typeof value === 'number' || typeof value === 'boolean') {\n        sanitized[sanitizedKey] = value;\n      } else if (value === null || value === undefined) {\n        sanitized[sanitizedKey] = value;\n      } else {\n        // For complex objects, convert to string and sanitize\n        sanitized[sanitizedKey] = SecureValidation.sanitizeString(JSON.stringify(value));\n      }\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * Check if LogRocket is initialized\n   */\n  get isReady(): boolean {\n    return this.isInitialized && this.logRocket !== null;\n  }\n\n  /**\n   * Get the underlying LogRocket instance (use with caution)\n   */\n  get instance(): LogRocketInstance | null {\n    return this.logRocket;\n  }\n}\n\n// Create and export singleton instance\nexport const secureLogRocket = new SecureLogRocket();\nexport default secureLogRocket;\n","import { useEffect } from 'react';\n\nconst MicrosoftClarityInit: React.FC = () => {\n  useEffect(() => {\n    // Inicializar Microsoft Clarity apenas em produção\n    if (import.meta.env.PROD) {\n      try {\n        // Usar script inline em vez da biblioteca para evitar problemas de CORS\n        const clarityScript = document.createElement('script');\n        clarityScript.type = 'text/javascript';\n        clarityScript.innerHTML = `\n          (function(c,l,a,r,i,t,y){\n            c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\n            t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i;\n            y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\n          })(window, document, \"clarity\", \"script\", \"rp64ayubme\");\n\n          // Identificar o usuário/portfolio\n          clarity(\"identify\", \"tarcisio-portfolio\", \"Tarcísio Bispo Portfolio\");\n          \n          // Adicionar tags personalizadas para contexto\n          clarity(\"set\", \"portfolio_owner\", \"Tarcisio Bispo de Araujo\");\n          clarity(\"set\", \"portfolio_type\", \"UX/Product Designer\");\n          clarity(\"set\", \"portfolio_version\", \"2024\");\n          clarity(\"set\", \"site_language\", \"multi\");\n          \n          // Registrar evento de inicialização do portfolio\n          clarity(\"event\", \"portfolio_initialized\");\n        `;\n        \n        document.head.appendChild(clarityScript);\n        console.log('Microsoft Clarity initialized successfully');\n      } catch (error) {\n        console.error('Failed to initialize Microsoft Clarity:', error);\n      }\n    } else {\n      console.log('Microsoft Clarity disabled in development mode');\n    }\n  }, []);\n\n  return null; // Este componente não renderiza nada\n};\n\nexport default MicrosoftClarityInit;","import { useEffect } from 'react';\r\n\r\ninterface GTMProps {\r\n  gtmId: string;\r\n}\r\n\r\n// Declaração de tipos para o dataLayer\r\ndeclare global {\r\n  interface Window {\r\n    dataLayer: any[];\r\n    gtag: (command: string, action: string, params?: any) => void;\r\n  }\r\n}\r\n\r\nconst GoogleTagManager: React.FC<GTMProps> = ({ gtmId }) => {\r\n  useEffect(() => {\r\n    // Inicializar dataLayer se não existir\r\n    if (typeof window !== 'undefined') {\r\n      window.dataLayer = window.dataLayer || [];\r\n      \r\n      // Função gtag para enviar eventos\r\n      window.gtag = function(command: string, action: string, params?: any) {\r\n        window.dataLayer.push(arguments);\r\n      };\r\n      \r\n      // Configurar GTM\r\n      window.gtag('js', new Date(), {});\r\n      window.gtag('config', gtmId, {});\r\n    }\r\n  }, [gtmId]);\r\n\r\n  return null;\r\n};\r\n\r\n// Componente para o script do GTM no head\r\nexport const GTMHead: React.FC<GTMProps> = ({ gtmId }) => {\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined' && gtmId) {\r\n      // Script do GTM para o head\r\n      const script = document.createElement('script');\r\n      script.innerHTML = `\r\n        (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\r\n        new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\r\n        j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\r\n        'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\r\n        })(window,document,'script','dataLayer','${gtmId}');\r\n      `;\r\n      \r\n      // Adicionar ao head\r\n      document.head.appendChild(script);\r\n      \r\n      // Cleanup\r\n      return () => {\r\n        if (document.head.contains(script)) {\r\n          document.head.removeChild(script);\r\n        }\r\n      };\r\n    }\r\n  }, [gtmId]);\r\n\r\n  return null;\r\n};\r\n\r\n// Componente para o noscript do GTM no body\r\nexport const GTMBody: React.FC<GTMProps> = ({ gtmId }) => {\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined' && gtmId) {\r\n      // Criar noscript para o body\r\n      const noscript = document.createElement('noscript');\r\n      noscript.innerHTML = `\r\n        <iframe src=\"https://www.googletagmanager.com/ns.html?id=${gtmId}\"\r\n        height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe>\r\n      `;\r\n      \r\n      // Adicionar logo após a abertura do body\r\n      document.body.insertBefore(noscript, document.body.firstChild);\r\n      \r\n      // Cleanup\r\n      return () => {\r\n        if (document.body.contains(noscript)) {\r\n          document.body.removeChild(noscript);\r\n        }\r\n      };\r\n    }\r\n  }, [gtmId]);\r\n\r\n  return null;\r\n};\r\n\r\n// Hook para enviar eventos personalizados ao GTM\r\nexport const useGTM = () => {\r\n  const sendEvent = (eventName: string, parameters: Record<string, any> = {}) => {\r\n    if (typeof window !== 'undefined' && window.gtag) {\r\n      window.gtag('event', eventName, parameters);\r\n    }\r\n  };\r\n\r\n  const sendPageView = (pagePath: string, pageTitle?: string) => {\r\n    if (typeof window !== 'undefined' && window.gtag) {\r\n      window.gtag('config', 'GTM-M2NFRBD9', {\r\n        page_path: pagePath,\r\n        page_title: pageTitle || document.title,\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendConversion = (conversionId: string, value?: number, currency?: string) => {\r\n    if (typeof window !== 'undefined' && window.gtag) {\r\n      window.gtag('event', 'conversion', {\r\n        send_to: conversionId,\r\n        value: value,\r\n        currency: currency || 'BRL',\r\n      });\r\n    }\r\n  };\r\n\r\n  return {\r\n    sendEvent,\r\n    sendPageView,\r\n    sendConversion,\r\n  };\r\n};\r\n\r\nexport default GoogleTagManager;\r\n","import React, { useEffect } from 'react';\r\nimport { secureLogRocket } from '@/utils/secureLogRocket';\r\nimport MicrosoftClarityInit from './MicrosoftClarity';\r\nimport { GTMHead, GTMBody } from './GoogleTagManager';\r\nimport { ANALYTICS_CONFIG } from '@/config/analytics';\r\n\r\ninterface AnalyticsProviderProps {\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst AnalyticsProvider: React.FC<AnalyticsProviderProps> = ({ children }) => {\r\n  useEffect(() => {\r\n    // Inicializar analytics apenas em produção\r\n    if (import.meta.env.PROD) {\r\n      try {\r\n        // Secure LogRocket initialization with enhanced security\r\n        secureLogRocket.init('fatqpp/portfolio-kbfin', {\r\n          shouldAugmentNPS: false, // Disable to prevent regex vulnerabilities\r\n          shouldParseXHRBlob: false, // Disable for security\r\n          network: {\r\n            isEnabled: true,\r\n            requestSanitizer: (request: any) => {\r\n              // Sanitize URLs to prevent regex-based attacks\r\n              if (request && request.url) {\r\n                try {\r\n                  const url = new URL(request.url);\r\n                  // Only allow specific domains\r\n                  const allowedDomains = [\r\n                    'tarcisiobispo.github.io',\r\n                    'logrocket.com',\r\n                    'logrocket.io',\r\n                    'clarity.ms',\r\n                    'clarity.microsoft.com',\r\n                    'google-analytics.com',\r\n                    'googletagmanager.com'\r\n                  ];\r\n                  \r\n                  // Check if the hostname ends with any of the allowed domains\r\n                  const isAllowed = allowedDomains.some(domain => \r\n                    url.hostname === domain || url.hostname.endsWith(`.${domain}`)\r\n                  );\r\n                  \r\n                  if (!isAllowed) {\r\n                    return null; // Skip logging this request\r\n                  }\r\n                } catch (e) {\r\n                  return null; // Skip invalid URLs\r\n                }\r\n              }\r\n              return request;\r\n            }\r\n          }\r\n        }).then(() => {\r\n          // Analytics initialized successfully - log removed for production\r\n\r\n          // Configurar contexto do portfolio para LogRocket\r\n          secureLogRocket.getSessionURL((sessionURL) => {\r\n            // Session URL available for debugging if needed\r\n          });\r\n\r\n          // Adicionar informações do portfolio como contexto\r\n          secureLogRocket.track('Portfolio Visit', {\r\n            portfolioOwner: 'Tarcisio Bispo de Araujo',\r\n            ownerEmail: 'tbisp0@hotmail.com',\r\n            portfolioType: 'UX/Product Designer',\r\n            version: '2024'\r\n          });\r\n        }).catch((error) => {\r\n          console.error('Failed to initialize secure LogRocket:', error);\r\n        });\r\n\r\n      } catch (error) {\r\n        // Analytics initialization failed - error handling without console logs\r\n        if (import.meta.env.DEV) {\r\n          console.error('Failed to initialize analytics:', error);\r\n        }\r\n      }\r\n    }\r\n    // Analytics disabled in development mode - no console log needed\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {/* Google Tag Manager */}\r\n      <GTMHead gtmId={ANALYTICS_CONFIG.GTM_ID} />\r\n      <GTMBody gtmId={ANALYTICS_CONFIG.GTM_ID} />\r\n\r\n      {/* Microsoft Clarity */}\r\n      <MicrosoftClarityInit />\r\n\r\n      {children && children}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AnalyticsProvider;\r\n"],"file":"js/AnalyticsProvider-DARdq4s3.js"}