import { defineConfig, type ConfigEnv } from 'vite';
import react from '@vitejs/plugin-react-swc';
import { resolve } from 'path';
import type { PluginOption } from 'vite';
import sitemap from 'vite-plugin-sitemap';

// Configuração base do Vite
export default defineConfig(({ command, mode }: ConfigEnv) => {
  const isPreview = command === 'serve' && process.argv.includes('preview');
  const baseArgIndex = process.argv.findIndex(arg => arg.startsWith('--base='));
  const explicitBase = baseArgIndex >= 0 ? process.argv[baseArgIndex].split('=')[1] : null;
  const base = explicitBase || (command === 'serve' && !isPreview ? '/' : '/portfolio/');
  
  const plugins: PluginOption[] = [
    react({
      plugins: process.env.NODE_ENV === 'production' ? [
        ['@swc/plugin-remove-console', { exclude: ['error', 'warn'] }]
      ] : []
    })
  ];

  return {
  // Use determined base path
  base,
  plugins,
  resolve: {
    alias: {
      '@': resolve(__dirname, 'src'),
    },
  },
  // Ensure public directory is properly served
  publicDir: resolve(__dirname, 'public'),
  build: {
    // Otimizações de bundle - target moderno para evitar polyfills antigos
    target: ['es2020', 'edge88', 'firefox78', 'chrome87', 'safari14'],
    minify: 'terser',
    sourcemap: true, // Habilitar source maps para debugging

    // Configurações de chunk
    chunkSizeWarningLimit: 1000,
    reportCompressedSize: false, // Desativa o relatório de tamanho comprimido para builds mais rápidos
    
    // CSS otimizado para performance
    cssCodeSplit: true,
    cssMinify: true,
    cssTarget: ['chrome61', 'safari11', 'firefox60', 'edge18'],
    
    // Geração de manifest para melhor cache
    manifest: true,

    rollupOptions: {
      // Evitar polyfills desnecessários - mais agressivo
      external: (id) => {
        // Excluir todos os tipos de core-js
        if (id.includes('core-js')) return true;
        if (id.includes('core-js-pure')) return true;
        if (id.includes('core-js-global')) return true;
        if (id.includes('@babel/runtime')) return true;
        return false;
      },

      output: {
        // Manual chunks mais conservador para evitar quebrar React
        manualChunks: (id) => {
          // React core - manter junto para evitar problemas de contexto
          if (id.includes('node_modules/react/') || id.includes('node_modules/react-dom/')) {
            return 'react-vendor';
          }
          
          // Roteamento
          if (id.includes('node_modules/react-router-dom/')) {
            return 'router';
          }
          
          // Animações - pode ser separado
          if (id.includes('node_modules/framer-motion/')) {
            return 'animation';
          }
          
          // UI Libraries
          if (id.includes('node_modules/@headlessui/') || 
              id.includes('node_modules/@radix-ui/') || 
              id.includes('node_modules/@floating-ui/')) {
            return 'ui';
          }
          
          // Query
          if (id.includes('node_modules/@tanstack/react-query')) {
            return 'query';
          }
          
          // i18n
          if (id.includes('node_modules/react-i18next/') || 
              id.includes('node_modules/i18next/') || 
              id.includes('node_modules/i18next-browser-languagedetector/')) {
            return 'i18n';
          }
          
          // Icons
          if (id.includes('node_modules/lucide-react/')) {
            return 'icons';
          }
          
          // Forms
          if (id.includes('node_modules/react-hook-form/')) {
            return 'forms';
          }
          
          // Analytics
          if (id.includes('node_modules/@microsoft/clarity/') || 
              id.includes('node_modules/logrocket/')) {
            return 'analytics';
          }
        },

        // Nomeação de chunks
        chunkFileNames: (chunkInfo) => {
          const facadeModuleId = chunkInfo.facadeModuleId
            ? chunkInfo.facadeModuleId.split('/').pop()?.replace('.tsx', '').replace('.ts', '')
            : 'chunk';
          return `js/${facadeModuleId}-[hash].js`;
        },

        // Nomeação de assets
        assetFileNames: (assetInfo) => {
          const info = assetInfo.name?.split('.') || [];
          const ext = info[info.length - 1];

          if (/\.(png|jpe?g|svg|gif|tiff|bmp|ico)$/i.test(assetInfo.name || '')) {
            return `images/[name]-[hash][extname]`;
          }

          if (/\.(css)$/i.test(assetInfo.name || '')) {
            return `css/[name]-[hash][extname]`;
          }

          if (/\.(woff2?|eot|ttf|otf)$/i.test(assetInfo.name || '')) {
            return `fonts/[name]-[hash][extname]`;
          }

          return `assets/[name]-[hash][extname]`;
        },

        // Entry file naming
        entryFileNames: 'js/[name]-[hash].js'
      },

      // Tree-shaking mais conservador
      treeshake: {
        moduleSideEffects: true, // Permitir todos os side effects
        propertyReadSideEffects: false,
        unknownGlobalSideEffects: false
      }
    },

    // Configurações do Terser mais conservadoras
    terserOptions: {
      compress: {
        drop_console: false, // Manter console.logs para debug
        drop_debugger: true,
        pure_funcs: ['console.debug'],
        passes: 1, // Uma passada apenas
        unsafe: false, // Otimizações seguras apenas
        conditionals: true,
        dead_code: true,
        evaluate: true,
        if_return: true,
        join_vars: true,
        reduce_vars: true,
        side_effects: true, // Preservar side effects
        unused: true
      },
      mangle: {
        safari10: true,
        toplevel: false, // Não mangle nomes de nível superior
      },
      format: {
        comments: false
      }
    }
  },

  // Otimizações de desenvolvimento
  server: {
    // Configurações para melhorar o HMR
    hmr: {
      protocol: 'ws',
      host: 'localhost',
      port: 3000,
      clientPort: 443,
      path: '/hmr',
      timeout: 30000,
      overlay: false
    },
    // Middleware para adicionar headers de cache
    headers: {
      'Cache-Control': 'public, max-age=31536000, immutable'
    }
  },
  // Configurações do servidor de desenvolvimento
  server: {
    // Configurações para melhorar o HMR
    hmr: {
      protocol: 'ws',
      host: 'localhost',
      port: 3000,
      clientPort: 443,
      path: '/hmr',
      timeout: 30000,
      overlay: false
    },
    // Middleware para adicionar headers de cache
    headers: {
      'Cache-Control': 'public, max-age=31536000, immutable'
    }
  },
  
  // Otimizações de desenvolvimento
  optimizeDeps: {
    include: [
      'react',
      'react-dom',
      'react-router-dom',
      'framer-motion',
      'lucide-react',
      'react-i18next',
      'i18next'
    ],
    exclude: [
      '@vite/client',
      '@vite/env',
      'core-js',
      'core-js-pure',
      'core-js-global',
      '@babel/runtime',
      '@babel/runtime-corejs3'
    ]
  },

  // Configurações específicas para resolver problemas de React em produção
  define: {
    // Garantir que o React está disponível globalmente
    global: 'globalThis',
  },

  // Configurações de servidor para desenvolvimento
  server: {
    fs: {
      strict: false
    },
    // Clear console when starting the dev server
    clearScreen: true,
    // Configure HMR to work with the base path
    hmr: true, 
    // Configure headers using middleware to avoid ERR_INVALID_HTTP_TOKEN
    setupMiddleware: (middlewares) => {
      middlewares.use((req, res, next) => {
        // Set cache headers for assets
        res.setHeader('Cache-Control', 'public, max-age=31536000'); // 1 ano para assets com hash
        
        // Ensure correct MIME types for JavaScript files
        if (req.url?.endsWith('.js')) {
          res.setHeader('Content-Type', 'application/javascript');
        }
        // Ensure correct MIME type for favicon
        if (req.url?.endsWith('.ico')) {
          res.setHeader('Content-Type', 'image/x-icon');
        }
        next();
      });
      return middlewares;
    }
  }
});
